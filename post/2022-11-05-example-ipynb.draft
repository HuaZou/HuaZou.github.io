{
  "cells": [
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {
        "id": "lQLrVu9n3v1t"
      },
      "source": [
        "```\n",
        "---\n",
        "title: \n",
        "subtitle: \n",
        "\n",
        "# Summary for listings and search engines\n",
        "summary: .\n",
        "\n",
        "# Link this post with a project\n",
        "# Projects (optional).\n",
        "#   Associate this post with one or more of your projects.\n",
        "#   Simply enter your project's folder or file name without extension.\n",
        "#   E.g. `projects = [\"internal-project\"]` references `content/project/deep-learning/index.md`.\n",
        "#   Otherwise, set `projects = []`.\n",
        "projects: []\n",
        "\n",
        "# Date published\n",
        "date: '2022-11-05T20:13:14'\n",
        "\n",
        "# Date updated\n",
        "lastmod: '2022-11-05T22:13:14'\n",
        "\n",
        "# folder\n",
        "slug: '2022-11-05-example'\n",
        "\n",
        "# Is this an unpublished draft?\n",
        "draft: true\n",
        "\n",
        "# Show this page in the Featured widget?\n",
        "featured: false\n",
        "\n",
        "# Featured image\n",
        "# Place an image named `featured.jpg/png` in this page's folder and customize its options here.\n",
        "image:\n",
        "  caption: ''\n",
        "  focal_point: ''\n",
        "  placement: 2\n",
        "  preview_only: false\n",
        "\n",
        "authors:\n",
        "  - Hua Zou\n",
        "\n",
        "tags:\n",
        "  - machine learning\n",
        "  - microbiota\n",
        "\n",
        "categories:\n",
        "  - Machine Learning\n",
        "\n",
        "type: book\n",
        "---\n",
        "```\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Loading required python packages"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yXbcUxbU33sg",
        "outputId": "ab36692f-5050-4723-edda-e4563b26f0b0"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {
        "id": "KlnEpHrLPHGi"
      },
      "source": [
        "## Importing Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "2xa_SFsTscRg"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[0.69646919, 0.28613933, 0.22685145, 0.55131477, 0.71946897,\n",
              "        0.42310646, 0.9807642 , 0.68482974, 0.4809319 , 0.39211752,\n",
              "        0.34317802, 0.72904971],\n",
              "       [0.43857224, 0.0596779 , 0.39804426, 0.73799541, 0.18249173,\n",
              "        0.17545176, 0.53155137, 0.53182759, 0.63440096, 0.84943179,\n",
              "        0.72445532, 0.61102351],\n",
              "       [0.72244338, 0.32295891, 0.36178866, 0.22826323, 0.29371405,\n",
              "        0.63097612, 0.09210494, 0.43370117, 0.43086276, 0.4936851 ,\n",
              "        0.42583029, 0.31226122],\n",
              "       [0.42635131, 0.89338916, 0.94416002, 0.50183668, 0.62395295,\n",
              "        0.1156184 , 0.31728548, 0.41482621, 0.86630916, 0.25045537,\n",
              "        0.48303426, 0.98555979],\n",
              "       [0.51948512, 0.61289453, 0.12062867, 0.8263408 , 0.60306013,\n",
              "        0.54506801, 0.34276383, 0.30412079, 0.41702221, 0.68130077,\n",
              "        0.87545684, 0.51042234],\n",
              "       [0.66931378, 0.58593655, 0.6249035 , 0.67468905, 0.84234244,\n",
              "        0.08319499, 0.76368284, 0.24366637, 0.19422296, 0.57245696,\n",
              "        0.09571252, 0.88532683],\n",
              "       [0.62724897, 0.72341636, 0.01612921, 0.59443188, 0.55678519,\n",
              "        0.15895964, 0.15307052, 0.69552953, 0.31876643, 0.6919703 ,\n",
              "        0.55438325, 0.38895057],\n",
              "       [0.92513249, 0.84167   , 0.35739757, 0.04359146, 0.30476807,\n",
              "        0.39818568, 0.70495883, 0.99535848, 0.35591487, 0.76254781,\n",
              "        0.59317692, 0.6917018 ],\n",
              "       [0.15112745, 0.39887629, 0.2408559 , 0.34345601, 0.51312815,\n",
              "        0.66662455, 0.10590849, 0.13089495, 0.32198061, 0.66156434,\n",
              "        0.84650623, 0.55325734],\n",
              "       [0.85445249, 0.38483781, 0.3167879 , 0.35426468, 0.17108183,\n",
              "        0.82911263, 0.33867085, 0.55237008, 0.57855147, 0.52153306,\n",
              "        0.00268806, 0.98834542]])"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.random.seed(123)\n",
        "\n",
        "uniform_data = np.random.rand(10, 12)\n",
        "\n",
        "uniform_data"
      ]
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {
        "id": "ggUBeIgzsczN"
      },
      "source": [
        "## Plotting\n",
        "\n",
        "heatmap\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.set()\n",
        "ax = sns.heatmap(uniform_data, vmin=0, vmax=1)\n",
        "plt.show()"
      ]
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Session info"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<details>\n",
              "<summary>Click to view session information</summary>\n",
              "<pre>\n",
              "-----\n",
              "matplotlib          3.7.2\n",
              "numpy               1.23.3\n",
              "pandas              2.0.3\n",
              "seaborn             0.12.2\n",
              "session_info        1.0.0\n",
              "-----\n",
              "</pre>\n",
              "<details>\n",
              "<summary>Click to view modules imported as dependencies</summary>\n",
              "<pre>\n",
              "CoreFoundation              NA\n",
              "Foundation                  NA\n",
              "PIL                         10.0.0\n",
              "PyObjCTools                 NA\n",
              "anyio                       NA\n",
              "appnope                     0.1.3\n",
              "asttokens                   NA\n",
              "attr                        23.1.0\n",
              "attrs                       23.1.0\n",
              "babel                       2.12.1\n",
              "backcall                    0.2.0\n",
              "bottleneck                  1.3.7\n",
              "brotli                      NA\n",
              "certifi                     2023.07.22\n",
              "cffi                        1.15.1\n",
              "chardet                     5.1.0\n",
              "charset_normalizer          3.2.0\n",
              "colorama                    0.4.6\n",
              "comm                        0.1.3\n",
              "cycler                      0.10.0\n",
              "cython_runtime              NA\n",
              "dateutil                    2.8.2\n",
              "debugpy                     1.6.7\n",
              "decorator                   5.1.1\n",
              "defusedxml                  0.7.1\n",
              "executing                   1.2.0\n",
              "fastjsonschema              NA\n",
              "google                      NA\n",
              "idna                        3.4\n",
              "importlib_metadata          NA\n",
              "importlib_resources         NA\n",
              "ipykernel                   6.24.0\n",
              "ipywidgets                  8.0.7\n",
              "jedi                        0.18.2\n",
              "jinja2                      3.1.2\n",
              "json5                       NA\n",
              "jsonpointer                 2.0\n",
              "jsonschema                  4.18.4\n",
              "jsonschema_specifications   NA\n",
              "jupyter_events              0.6.3\n",
              "jupyter_server              2.7.0\n",
              "jupyterlab_server           2.23.0\n",
              "kiwisolver                  1.4.4\n",
              "markupsafe                  2.1.3\n",
              "matplotlib_inline           0.1.6\n",
              "mpl_toolkits                NA\n",
              "nbformat                    5.9.1\n",
              "numexpr                     2.8.4\n",
              "objc                        9.2\n",
              "overrides                   NA\n",
              "packaging                   23.1\n",
              "parso                       0.8.3\n",
              "patsy                       0.5.3\n",
              "pexpect                     4.8.0\n",
              "pickleshare                 0.7.5\n",
              "pkg_resources               NA\n",
              "platformdirs                3.9.1\n",
              "prometheus_client           NA\n",
              "prompt_toolkit              3.0.39\n",
              "psutil                      5.9.5\n",
              "ptyprocess                  0.7.0\n",
              "pure_eval                   0.2.2\n",
              "pydev_ipython               NA\n",
              "pydevconsole                NA\n",
              "pydevd                      2.9.5\n",
              "pydevd_file_utils           NA\n",
              "pydevd_plugins              NA\n",
              "pydevd_tracing              NA\n",
              "pygments                    2.15.1\n",
              "pyparsing                   3.0.9\n",
              "pythonjsonlogger            NA\n",
              "pytz                        2023.3\n",
              "referencing                 NA\n",
              "requests                    2.31.0\n",
              "rfc3339_validator           0.1.4\n",
              "rfc3986_validator           0.1.1\n",
              "rpds                        NA\n",
              "scipy                       1.11.1\n",
              "send2trash                  NA\n",
              "six                         1.16.0\n",
              "sniffio                     1.3.0\n",
              "socks                       1.7.1\n",
              "sphinxcontrib               NA\n",
              "stack_data                  0.6.2\n",
              "statsmodels                 0.14.0\n",
              "tornado                     6.3.2\n",
              "traitlets                   5.9.0\n",
              "typing_extensions           NA\n",
              "urllib3                     1.26.15\n",
              "wcwidth                     0.2.6\n",
              "websocket                   1.6.1\n",
              "yaml                        6.0\n",
              "zipp                        NA\n",
              "zmq                         25.1.0\n",
              "zoneinfo                    NA\n",
              "zope                        NA\n",
              "</pre>\n",
              "</details> <!-- seems like this ends pre, so might as well be explicit -->\n",
              "<pre>\n",
              "-----\n",
              "IPython             8.14.0\n",
              "jupyter_client      8.3.0\n",
              "jupyter_core        5.3.1\n",
              "jupyterlab          4.0.3\n",
              "notebook            7.0.0\n",
              "-----\n",
              "Python 3.9.16 | packaged by conda-forge | (main, Feb  1 2023, 21:42:20) [Clang 14.0.6 ]\n",
              "macOS-12.2.1-x86_64-i386-64bit\n",
              "-----\n",
              "Session information updated at 2023-07-25 15:44\n",
              "</pre>\n",
              "</details>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import session_info\n",
        "\n",
        "\n",
        "session_info.show()"
      ]
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Reference\n",
        "\n",
        "+ "
      ]
    }
  ],
  "metadata": {
    "colab": {
      "authorship_tag": "ABX9TyPdaKVOdk5mObxu/OYmMtUY",
      "collapsed_sections": [],
      "include_colab_link": true,
      "name": "LMER in Python.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.16"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
